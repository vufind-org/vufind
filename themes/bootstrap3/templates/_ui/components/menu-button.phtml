<?php
  $wrapperTag = $this->wrapperTag ?? 'div';
  $showSelectedValue = $this->showSelectedValue ?? false;
  $selected = $this->defaultSelectedValue ?? '';

  $toggleTag = $this->toggleTag ?? 'button';
  $defaultAttrs = [
    'id' => uniqid('toggle-'),
    'type' => 'button', // Accessible default
    'class' => 'dropdown-toggle', // Bootstrap class
    'data-toggle' => 'dropdown', // Bootstrap data-attr
    'aria-expanded' => 'false',
    'aria-haspopup' => 'true',
  ];

  // An anchor tag with an href should only be used as
  // a non-js fallback to open the menu on another page
  if ($this->href ?? false) {
    $toggleTag = 'a';
    $defaultAttrs['href'] = $this->href;
    $defaultAttrs['type'] = null;
  }

  $toggleAttrs = array_merge($defaultAttrs, $this->toggleAttrs ?? []);
?>
<?php ob_start(); ?>
  <ul class="dropdown-menu dropdown-menu-right">
    <?php foreach ($this->menuItems as $current): ?>
      <?php
        if ($current['selected'] ?? false) {
          $selected = $this->transEsc($current['label']);
          $extraClasses = ' active';
        } else {
          $extraClasses = '';
        }
      ?>
      <li class="dropdown__item-container<?=$extraClasses?>">
        <?php
          $extra = $current['extraLinkAttributes'] ?? [];
          $standard = ['class' => 'dropdown-item', 'href' => $current['url'], 'rel' => 'nofollow'];
          $linkAttributes = array_merge($extra, $standard);
        ?>
        <a<?=$this->htmlAttributes($linkAttributes)?>>
          <?=$this->transEsc($current['label']) ?>
        </a>
      </li>
    <?php endforeach; ?>
  </ul>
  <?php
    $label = empty($this->toggleLabel) ? '' : $this->transEsc($this->toggleLabel);
    $buttonText = $showSelectedValue ? $selected : $label;
  ?>
  <?=
    $this->makeTag(
      $toggleTag,
      $this->transEsc($this->toggleLabel) . $this->icon('dropdown-caret'),
      $toggleAttrs,
      ['escapeContent' => false]
    )
  ?>
<?php $menuContents = ob_get_contents(); ?>
<?php ob_end_clean(); ?>

<?php if ($showSelectedValue && '' !== $label): ?>
  <?php
    // We need an inner wrapper to keep the label out of the dropdown and from
    // affecting dropdown position
    $menuContents = '<label for="' . $this->escapeHtmlAttr($toggleAttrs['id']) . '" class="dropdown__label">'
      . $this->escapeHtml($label)
      . '</label>'
      . $this->makeTag(
        'div',
        $menuContents,
        'dropdown',
        ['escapeContent' => false]
      );
    $wrapperClass = trim(($this->wrapperClass ?? '') . ' dropdown-container');
  ?>
<?php else: ?>
  <?php $wrapperClass = trim(($this->wrapperClass ?? '') . ' dropdown'); ?>
<?php endif; ?>

<?=$this->makeTag($wrapperTag, $menuContents, $wrapperClass, ['escapeContent' => false]) ?>
