<?php

/**
 * Console command: browscap
 *
 * PHP version 8
 *
 * Copyright (C) The National Library of Finland 2024.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * @category VuFind
 * @package  Console
 * @author   Ere Maijala <ere.maijala@helsinki.fi>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     https://vufind.org/wiki/development Wiki
 */

namespace VuFindConsole\Command\Util;

use Exception;
use Laminas\Cache\Psr\SimpleCache\SimpleCacheDecorator;
use Laminas\Cache\Storage\StorageInterface;
use Psr\Log\InvalidArgumentException;
use Psr\Log\LogLevel;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Logger\ConsoleLogger;
use Symfony\Component\Console\Output\OutputInterface;
use VuFind\Cache\Manager as CacheManager;
use VuFind\Http\GuzzleService;

/**
 * Console command: browscap
 *
 * @category VuFind
 * @package  Console
 * @author   Ere Maijala <ere.maijala@helsinki.fi>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     https://vufind.org/wiki/development Wiki
 */
#[AsCommand(
    name: 'util/browscap',
    description: 'Browscap Cache Manager'
)]
class BrowscapCommand extends Command
{
    /**
     * Cache manager
     *
     * @var CacheManager
     */
    protected $cacheManager;

    /**
     * Guzzle service
     *
     * @var GuzzleService
     */
    protected $guzzleService;

    /**
     * Constructor
     *
     * @param CacheManager  $cacheManager  Cache manager
     * @param GuzzleService $guzzleService Guzzle service
     */
    public function __construct(
        CacheManager $cacheManager,
        GuzzleService $guzzleService
    ) {
        parent::__construct();
        $this->cacheManager = $cacheManager;
        $this->guzzleService = $guzzleService;
    }

    /**
     * Configure the command.
     *
     * @return void
     */
    protected function configure()
    {
        $this
            ->setHelp('Manages the browscap cache.')
            ->addArgument(
                'function',
                InputArgument::REQUIRED,
                'Function to execute. Currently the only supported function is: update'
            )
            ->addOption(
                'file-type',
                null,
                InputOption::VALUE_REQUIRED,
                'Browscap file type (standard, lite or full). See https://browscap.org/ for more information.',
                'standard'
            );
    }

    /**
     * Display a warning message if generated files are not owned by the Apache user.
     *
     * @param ConsoleLogger    $logger        Logger (for warning output)
     * @param StorageInterface $browscapCache Browscap cache object
     *
     * @return void
     *
     * @throws Exception
     * @throws InvalidArgumentException
     */
    protected function checkCachePermissions(ConsoleLogger $logger, StorageInterface $browscapCache)
    {
        // If we have a file cache, let's make sure the created files are consistent
        // with expectations.
        if ($browscapCacheDir = ($browscapCache->getOptions()->cacheDir ?? null)) {
            // Figure out the username of the web server -- there is no perfect way to do
            // this, but if an object cache exists, it was most likely generated by the
            // web server. We'll try to use that, and fall back on the base directory
            // otherwise.
            $baseCacheDir = $this->cacheManager->getCacheDir(false);
            $objectCacheDir = $baseCacheDir . '/objects';
            $dirToCheck = file_exists($objectCacheDir) ? $objectCacheDir : $baseCacheDir;
            $baseCacheOwner = fileowner($dirToCheck);
            // Look through the browscap cache for files owned by somebody other than the
            // expected web user.
            $dir = opendir($browscapCacheDir);
            while ($file = readdir($dir)) {
                if (fileowner($file) !== $baseCacheOwner) {
                    $baseCacheUserDetails = posix_getpwuid($baseCacheOwner);
                    $baseCacheUsername = $baseCacheUserDetails['name'] ?? $baseCacheOwner;
                    $logger->warning(
                        "Generated files are not owned by $baseCacheUsername; "
                        . "if persistent login attempts fail, try recursively changing ownership of $browscapCacheDir."
                    );
                    return;
                }
            }
        }
    }

    /**
     * Run the command.
     *
     * Note that there's also similar functionality in MaintenanceController.
     *
     * @param InputInterface  $input  Input object
     * @param OutputInterface $output Output object
     *
     * @return int 0 for success
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        ini_set('memory_limit', '1024M');
        if ($input->getArgument('function') !== 'update') {
            $output->writeln('<error>Invalid function specified</error>');
            return Command::FAILURE;
        }
        switch ($input->getOption('file-type')) {
            case 'full':
                $type = \BrowscapPHP\Helper\IniLoaderInterface::PHP_INI_FULL;
                break;
            case 'lite':
                $type = \BrowscapPHP\Helper\IniLoaderInterface::PHP_INI_LITE;
                break;
            case 'standard':
                $type = \BrowscapPHP\Helper\IniLoaderInterface::PHP_INI;
                break;
            default:
                $output->writeln('<error>Invalid file-type specified</error>');
                return Command::FAILURE;
        }

        $browscapCache = $this->cacheManager->getCache('browscap');
        $cache = new SimpleCacheDecorator($browscapCache);
        $logger = new ConsoleLogger($output, [LogLevel::INFO => OutputInterface::VERBOSITY_NORMAL]);
        $client = $this->guzzleService->createClient();

        $bc = new \BrowscapPHP\BrowscapUpdater($cache, $logger, $client);
        $logger->info('Checking for update...');
        try {
            $bc->checkUpdate();
        } catch (\BrowscapPHP\Exception\NoNewVersionException $e) {
            $logger->info('No newer version available.');
            return Command::SUCCESS;
        } catch (\BrowscapPHP\Exception\NoCachedVersionException $e) {
            $logger->info('No cached version available.');
        } catch (\Exception $e) {
            // Output the exception and continue (assume we don't have a current version):
            $logger->warning((string)$e);
        }
        $logger->info('Updating browscap cache...');
        $bc->update($type);
        $logger->info('Update complete.');

        $this->checkCachePermissions($logger, $browscapCache);

        return Command::SUCCESS;
    }
}
