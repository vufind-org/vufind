<?php

/**
 * XSLT geographic helper tests.
 *
 * PHP version 7
 *
 * Copyright (C) Villanova University 2019.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * @category VuFind
 * @package  Tests
 * @author   Demian Katz <demian.katz@villanova.edu>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     https://vufind.org/wiki/development:testing:unit_tests Wiki
 */

namespace VuFindTest\XSLT\Import;

use VuFind\XSLT\Import\VuFindGeo;

/**
 * XSLT geographic helper tests.
 *
 * @category VuFind
 * @package  Tests
 * @author   Demian Katz <demian.katz@villanova.edu>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     https://vufind.org/wiki/development:testing:unit_tests Wiki
 */
class VuFindGeoTest extends \PHPUnit\Framework\TestCase
{
    /**
     * Test basic data extraction using valid values.
     *
     * @return void
     */
    public function testDataExtraction()
    {
        $coverage = 'name=Dehradun; westlimit=77.8884; southlimit=30.2259; '
            . 'eastlimit=78.2234; northlimit=30.4511';
        $this->assertEquals('Dehradun', VuFindGeo::getLabelFromCoverage($coverage));
        $this->assertEquals(
            '77.8884 78.2234 30.4511 30.2259',
            VuFindGeo::getDisplayCoordinatesFromCoverage($coverage)
        );
        $this->assertEquals(
            'ENVELOPE(77.8884,78.2234,30.4511,30.2259)',
            VuFindGeo::getAllCoordinatesFromCoverage($coverage)
        );
    }

    /**
     * Get an error logger so we can assert about messages generated by VuFindGeo.
     *
     * @return \class
     */
    public function getLogger()
    {
        $logger = new class () {
            protected $messages = [];

            /**
             * Capture a log message
             *
             * @param string $msg Log message
             *
             * @return void
             */
            public function log($msg): void
            {
                $this->messages[] = $msg;
            }

            /**
             * Get the top message from the message stack
             *
             * @return string
             */
            public function popMessage()
            {
                return array_pop($this->messages);
            }
        };
        VuFindGeo::$logMethod = [$logger, 'log'];
        return $logger;
    }

    /**
     * Test bad or missing coordinate data.
     *
     * @return void
     */
    public function testMissingData()
    {
        $badInputs = [
            [
                'data' => '',
                'error' => 'Missing or non-numeric coordinate value.',
            ],
            [
                'data' => 'name=Dehradun; westlimit=77.8884; southlimit=30.2259;',
                'error' => 'Missing or non-numeric coordinate value.',
            ],
            [
                'data' => 'eastlimit=78.2234; northlimit=30.4511',
                'error' => 'Missing or non-numeric coordinate value.',
            ],
            [
                'data' => 'eastlimit=78.2234; westlimit=77.8884; northlimit=90; southlimit=90',
                'error' => 'Coordinates form a line at the pole',
            ],
            [
                'data' => 'eastlimit=78.2234; westlimit=77.8884; northlimit=95; southlimit=90',
                'error' => 'Coordinates exceed map extent.',
            ],
            [
                'data' => 'eastlimit=78.2234; westlimit=77.8884; northlimit=90; southlimit=95',
                'error' => 'Coordinates exceed map extent.',
            ],
            [
                'data' => 'eastlimit=978.2234; westlimit=77.8884; northlimit=90; southlimit=30',
                'error' => 'Coordinates exceed map extent.',
            ],
            [
                'data' => 'eastlimit=78.2234; westlimit=977.8884; northlimit=90; southlimit=30',
                'error' => 'Coordinates exceed map extent.',
            ],
            [
                'data' => 'eastlimit=78.2234; westlimit=77.8884; northlimit=80; southlimit=90',
                'error' => 'North < South.',
            ],
            [
                'data' => 'eastlimit=28.2234; westlimit=77.8884; northlimit=90; southlimit=30',
                'error' => 'East < West.',
            ],
            [
                'data' => 'eastlimit=98.2234; westlimit=77.8884; northlimit=-89.9; southlimit=-90',
                'error' => 'Coordinates < 0.167 degrees from South Pole. Coordinate Distance: 0.1',
            ],
        ];
        $logger = $this->getLogger();
        foreach ($badInputs as $input) {
            // When one or more coordinates are missing, we expect a null return:
            $this->assertNull(VuFindGeo::getDisplayCoordinatesFromCoverage($input['data']));
            $this->assertEquals($input['error'], $logger->popMessage());
            $this->assertNull(VuFindGeo::getAllCoordinatesFromCoverage($input['data']));
            $this->assertEquals($input['error'], $logger->popMessage());
        }
    }
}
