; Configuration for VuFind's Demo ILS driver (mainly used for testing).
[Catalog]
; Identifier for the driver for testing multiple Demo driver's with the MultiBackend
; driver. Unique identifiers avoid the caches of different instances from getting
; mixed.
;id = demo1

; Should we return record IDs in functions related to the user's account (true), or
; should we instead return titles only (false).
idsInMyResearch = true

; Whether to support storage retrieval requests
storageRetrievalRequests = true

; Whether to support ILL requests
ILLRequests = true

; Patron login method to use. The following options are available:
; password  Normal username+password (the default)
; email     Username is an email address
;loginMethod = email

; Holdings configuration options.
[Holdings]
; Max. no. of items displayed in the holdings tab. A paginator is used when there are
; more holdings to display. (Default = no limit)
;itemLimit = "10"

; Configuration for retrieving sample records
[Records]
; Search backend to pull records from
source = Solr

; Query to use for record retrieval
query = "*:*"

; Define which services may be randomly chosen for availability status responses:
services[] = 'loan'
services[] = 'presentation'
services[] = 'custom'

; This setting can be used to create fake checked out items for specific records.
; The value is a JSON document representing the status information returned by the
; driver.
;transactions = '[{"id":"1234", ... "renewable": true}]';

; This setting can be used to create fake historic loan items for specific records.
; The value is a JSON document representing the status information returned by the
; driver.
;historicTransactions = '[{"id":"1234", ... "dueDate": "01/01/2017"}]';

; This setting can be used to flag specific records as recently returned; if
; commented out, a random set of IDs will be selected.
;recently_returned[] = myBibId001
;recently_returned[] = myBibId002

; This setting can be used to flag specific records as newly acquired; if
; commented out, a random set of IDs will be selected.
;new_items[] = myBibId001
;new_items[] = myBibId002

; This setting may be used to simulate suppressed records (through the
; getSuppressedRecords method):
;suppressed[] = suppressedRecordId1
;suppressed[] = suppressedRecordId2

; This section can be used to create a set of fake users recognized by the
; Demo driver. If it is uncommented, only usernames and passwords listed here
; will be recognized for ILS login. If it is commented out, all username/password
; combinations will be accepted.
;[Users]
;user1 = "password1"
;user2 = "password2"

; This section can be used to create fake holdings for specific records. The
; key is the record ID, the value is a JSON document containing an array of
; objects representing holdings records. See the demo driver's getRandomHolding()
; method for a list of fields that are supported. Any omitted fields will be
; overwritten with random results from getRandomHolding.
;
; This mechanism is primarily intended for use with automated testing.
;
; The example below forces two item records to be created for bib record 1234,
; with locations of "foo" and "bar" respectively; all other details will be
; randomized.
;[StaticHoldings]
;1234 = '[{"location": "foo"}, {"location": "bar"}]'

; This section controls how often the Demo driver simulates failure for various
; features. The key is the method name that might fail; the value is the probability
; of failure as a percentage (represented as a number between 0 and 100, with 0
; meaning no failures and 100 meaning no successes). Each method has its own
; default value (usually 50%) which will be used if no value is provided below.
[Failure_Probabilities]
cancelHolds = 50
cancelILLRequests = 50
cancelStorageRetrievalRequests = 50
changePassword = 33
checkILLRequestIsValid = 10
checkIntermittentFailure = 0  ; chance of simulating low-level system failure
checkRenewBlock = 25
checkRequestIsValid = 10
checkStorageRetrievalRequestIsValid = 10
getAccountBlocks = 10
getDefaultRequestGroup = 50
getHoldDefaultRequiredDate = 50
getRequestBlocks = 10
placeHold = 50
placeILLRequest = 50
placeStorageRetrievalRequest = 50
renewMyItems = 50
updateHolds = 25

; Uncomment the following lines to override default config.ini password settings
; (see [Authorization] section).
;[changePassword]
;minLength = 4
;maxLength = 20
;pattern = "alphanumeric"
;hint = "Your optional custom hint can go here."

[Loans]
; Whether to support paging in the "ILS". Default is false, which means that all
; loans are always returned from the driver.
;paging = true

; If paging is enabled, how many results can be returned at a time. Default is 100.
;max_page_size = 100

[TransactionHistory]
; By default the loan history is disabled. Uncomment the following line to enable it.
;enabled = true

; This section controls hold behavior; note that you must also ensure that Holds are
; enabled in the [Catalog] section of config.ini in order to take advantage of these
; settings. Additional notes about some of these settings are available in the wiki:
; https://vufind.org/wiki/configuration:ils:holds
[Holds]
; HMACKeys - A list of hold form element names that will be analyzed for consistency
; during hold form processing. Most users should not need to change this setting.
HMACKeys = "record_id:item_id:level"

; defaultRequiredDate - A colon-separated list used to set the default "not required
; after" date for holds in the format days:months:years
; e.g. 0:1:0 will set a "not required after" date of 1 month from the current date.
; You may prefix this string with "driver:" to attempt to load a default date from
; the ILS based on internal rules instead of calculating one in VuFind; if the ILS
; call fails, the relative rules will still be used.
; e.g. "driver:0:1:0" tries to get the date from the ILS and uses one month from the
; current date as a fallback.
; Set to empty for no default.
defaultRequiredDate = 'driver:0:2:0'

; extraHoldFields - A colon-separated list used to display extra visible fields in
; the place holds form. Supported values are "comments", "requestGroup",
; "pickUpLocation", "proxiedUsers", "startDate", "requiredByDate" and
;"requiredByDateOptional"
extraHoldFields = "comments:requestGroup:pickUpLocation:proxiedUsers:startDate:requiredByDate"

; Optional help texts that can be displayed on the hold form. Displayed as is;
; HTML tags can be used, and everything needs to be properly escaped.
;helpText[*] = "Default help text used if not overridden."
;helpText[en-gb] = "Help text for British English localization."

; Optional help texts that can be displayed on the hold update form. Displayed as is;
; HTML tags can be used, and everything needs to be properly escaped.
;updateHelpText[*] = "Hold update default help text used if not overridden."
;updateHelpText[en-gb] = "Hold update help text for British English localization."

; Fields that can be updated for holds (unless the hold is already in transit or
; available for pickup). Supported values are "frozen", "frozenThrough" and
; "pickUpLocation"
;updateFields = frozen:frozenThrough:pickUpLocation

; Maximum number of holds to checks for differences in valid pickup locations when
; editing selected holds. Default is 0 for no limit.
;pickUpLocationCheckLimit = 20

; A Pick Up Location Code used to pre-select the pick up location drop down list and
; provide a default option if others are not available. Must be one of the following:
; 1) empty string to indicate that the first location is default (default setting)
; 2) "user-selected" to indicate that the user always has to choose the location
; 3) a value within the Location IDs returned by getPickUpLocations()
;defaultPickUpLocation = ""

; This setting can be used to exclude locations from the pickup location list
;excludePickupLocations = A:B

; This section can be used to create simulated proxied users (for testing proxy
; requests)
[ProxiedUsers]
;id1 = User 1
;id2 = User 2

; This section controls record link behavior
[RecordLinks]
; Should we include a link to a fake OPAC?
fakeOpacLink = false
