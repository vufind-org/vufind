/**
 * Custom script to get latitude and longitude coordinates.
 * Records can have multiple coordinates sets
 * of points and/or rectangles.
 * Points are represented by coordinate sets where N=S E=W.
 *
 * code adapted from xrosecky - Moravian Library
 * https://github.com/moravianlibrary/VuFind-2.x/blob/master/import/index_scripts/geo.bsh
 * and incorporates VuFind location.bsh functionality for GoogleMap display.
 *
 */

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.marc4j.marc.*;

private static final Pattern COORDINATES_PATTERN = Pattern.compile("^([eEwWnNsS])(\\d{3})(\\d{2})(\\d{2})");
private static final Pattern HDMSHDD_PATTERN = Pattern.compile("^([eEwWnNsS])(\\d+(\\.\\d+)?)");
private static final Pattern PMDD_PATTERN = Pattern.compile("^([+-])(\\d+(\\.\\d+)?)");

/**
 * Convert MARC coordinates into location_geo format.
 *
 * @param  Record record
 * @return List   geo_coordinates
 */
public List getAllCoordinates(Record record) {
    List geo_coordinates = new ArrayList();
    List list034 = record.getVariableFields("034");
    if (list034 != null) {
        for (VariableField vf : list034) {
            DataField df = (DataField) vf;
            // Initialize coordinate variables
            String d_coord = "";
            String e_coord = "";
            String f_coord = "";
            String g_coord = "";

            if (df.getSubfield('d') != null) {
                d_coord = df.getSubfield('d').getData();
            }
            if (df.getSubfield('e') != null) {
                e_coord = df.getSubfield('e').getData();
            }
            if (df.getSubfield('f') != null) {
                f_coord = df.getSubfield('f').getData();
            }
            if (df.getSubfield('g') != null) {
                g_coord = df.getSubfield('g').getData();
            }

            //DEBUG output
            //ControlField recID = (ControlField) record.getVariableField("001");
            //String recNum = recID.getData();
            //System.out.println("Record ID: " + recNum.trim() + " Coordinates Values: " + d_coord + " " + e_coord + " " + f_coord + " " + g_coord);

           // Check to see if this is a point coordinate with only 2 coordinates
           // If so, copy the N or S and E or W values into the empty fields
           if ((d_coord !=null && (e_coord == null || e_coord.trim().equals(""))) && (f_coord != null && (g_coord==null || g_coord.trim().equals("")))) {
                e_coord = d_coord;
                g_coord = f_coord;
           }
           if ((e_coord !=null && (d_coord == null || d_coord.trim().equals(""))) && (g_coord != null && (f_coord == null || f_coord.trim().equals("")))) {
                d_coord = e_coord;
                f_coord = g_coord;
           }
                
	   // Check for null coordinates
           if (validateCoordinateValues(record, d_coord, e_coord, f_coord, g_coord)) {
              // Check and convert coordinates to +/- decimal degrees
              Double west = convertCoordinate(d_coord);
              Double east = convertCoordinate(e_coord);
              Double north = convertCoordinate(f_coord);
              Double south = convertCoordinate(g_coord);
                  
	      if (validateDDCoordinates(record, west, east, north, south)) {
                // New Format for indexing coordinates in Solr 5.0 - minX, maxX, maxY, minY
                // Note - storage in Solr follows the WENS order, but display is WSEN order
                String result = String.format("ENVELOPE(%s,%s,%s,%s)", new Object[] { west, east, north, south });
                geo_coordinates.add(result);
              }  else {
                 System.out.println(".......... Not indexing INVALID coordinates: [ {" + d_coord + "} {" + e_coord + "} {" + f_coord + "} {" + g_coord + "} ]");
              }
         } else {
              System.out.println(".......... Not indexing INVALID coordinates: [ {" + d_coord + "} {" + e_coord + "} {" + f_coord + "} {" + g_coord + "} ]");
         }
      }
    }
    return geo_coordinates;
}

/**
 * Get point coordinates for GoogleMap display.
 *
 * @param  Record record
 * @return List   coordinates
 */
public List getPointCoordinates(Record record) {
    List coordinates = new ArrayList();
    List list034 = record.getVariableFields("034");
    if (list034 != null) {
        for (VariableField vf : list034) {
            DataField df = (DataField) vf;
            // Initialize coordinate variables
            String d_coord = "";
            String e_coord = "";
            String f_coord = "";
            String g_coord = "";

            if (df.getSubfield('d') != null) {
                d_coord = df.getSubfield('d').getData();
            }
            if (df.getSubfield('e') != null) {
                e_coord = df.getSubfield('e').getData();
            }
            if (df.getSubfield('f') != null) {
                f_coord = df.getSubfield('f').getData();
            }
            if (df.getSubfield('g') != null) {
                g_coord = df.getSubfield('g').getData();
            }

            // Check to see if this is a point coordinate with only 2 coordinates
            // If so, copy the N or S and E or W values into the empty fields
            if ((d_coord !=null && (e_coord == null || e_coord.trim().equals(""))) && (f_coord != null && (g_coord==null || g_coord.trim().equals("")))) {
                e_coord = d_coord;
                g_coord = f_coord;
            }
            if ((e_coord !=null && (d_coord == null || d_coord.trim().equals(""))) && (g_coord != null && (f_coord == null || f_coord.trim().equals("")))) {
                d_coord = e_coord;
                f_coord = g_coord;
            }

            // Check to see if we have a point coordinate
            if (d_coord.equals(e_coord) && f_coord.equals(g_coord)) {
              // Convert N (f_coord) and E (e_coord) coordinates to decimal degrees
              Double long_val = convertCoordinate(e_coord);
              Double lat_val = convertCoordinate(f_coord);
              String longlatCoordinate = Double.toString(long_val) + ',' + Double.toString(lat_val);
              coordinates.add(longlatCoordinate);
            }
        }
   }
   return coordinates;
}

/**
 * Get all available coordinates from the record.
 *
 * @param  Record record
 * @return List   geo_coordinates
 */
public List getDisplayCoordinates(Record record) {
    List geo_coordinates = new ArrayList();
    List list034 = record.getVariableFields("034");
    if (list034 != null) {
        for (VariableField vf : list034) {
            DataField df = (DataField) vf;
            // Initialize coordinate variables
            String d_coord = "";
            String e_coord = "";
            String f_coord = "";
            String g_coord = "";

            if (df.getSubfield('d') != null) {
                d_coord = df.getSubfield('d').getData();
            }
            if (df.getSubfield('e') != null) {
                e_coord = df.getSubfield('e').getData();
            }
            if (df.getSubfield('f') != null) {
                f_coord = df.getSubfield('f').getData();
            }
            if (df.getSubfield('g') != null) {
                g_coord = df.getSubfield('g').getData();
            }
            // Check for null coordinates
            if (validateCoordinateValues(record, d_coord, e_coord, f_coord, g_coord)) {
              String result = String.format("%s %s %s %s", new Object[] { d_coord, e_coord, f_coord, g_coord });
              geo_coordinates.add(result);
            } else {
                System.out.println(".......... Not indexing INVALID Display Coordinates: [ {" + d_coord + "} {" + e_coord + "} {" + f_coord + "} {" + g_coord + "} ]");
            }
        }
     }
   return geo_coordinates;
}

/**
 * Check coordinate type HDMS HDD or +/-DD.
 *
 * @param  String coordinateStr
 * @return Double coordinate
 */
public Double convertCoordinate(String coordinateStr) {
    Double coordinate = Double.NaN;
    Matcher HDmatcher = HDMSHDD_PATTERN.matcher(coordinateStr);
    Matcher PMDmatcher = PMDD_PATTERN.matcher(coordinateStr);
    if (HDmatcher.matches()) {
        String hemisphere = HDmatcher.group(1).toUpperCase();
        Double degrees = Double.parseDouble(HDmatcher.group(2));
        // Check for HDD or HDMS
        if (hemisphere.equals("N") || hemisphere.equals("S")) {
            if (degrees > 90) {
                String hdmsCoordinate = hemisphere+"0"+HDmatcher.group(2);
                coordinate = coordinateToDecimal(hdmsCoordinate);
            } else {
                coordinate = Double.parseDouble(HDmatcher.group(2));
                if (hemisphere.equals("S")) {
                    coordinate *= -1;
                }
            }
        }
        if (hemisphere.equals("E") || hemisphere.equals("W")) {
            if (degrees > 180) {
                String hdmsCoordinate = HDmatcher.group(0);
                coordinate = coordinateToDecimal(hdmsCoordinate);
            } else {
                coordinate = Double.parseDouble(HDmatcher.group(2));
                if (hemisphere.equals("W")) {
                    coordinate *= -1;
                }
            }
        }
        return coordinate;
    } else if (PMDmatcher.matches()) {
        String hemisphere = PMDmatcher.group(1);
        coordinate = Double.parseDouble(PMDmatcher.group(2));
        if (hemisphere.equals("-")) {
            coordinate *= -1;
        }
        return coordinate;
    } else {
         System.out.println("Decimal Degree Coordinate Conversion Error:  Poorly formed coordinate: [" + coordinateStr + "] ... Returning null value ... ");
         return null;
    }
}

/**
 * Convert HDMS coordinates to decimal degrees.
 *
 * @param  String coordinateStr
 * @return Double coordinate
 */
public Double coordinateToDecimal(String coordinateStr) {
    Matcher matcher = COORDINATES_PATTERN.matcher(coordinateStr);
    if (matcher.matches()) {
        String hemisphere = matcher.group(1).toUpperCase();
        int degrees = Integer.parseInt(matcher.group(2));
        int minutes = Integer.parseInt(matcher.group(3));
        int seconds = Integer.parseInt(matcher.group(4));
        double coordinate = degrees + (minutes / 60.0) + (seconds / 3600.0);
        if (hemisphere.equals("W") || hemisphere.equals("S")) {
            coordinate *= -1;
        }
        return coordinate;
    }
    return null;
}

/**
 * Check record coordinates to make sure they do not contain null values.
 *
 * @param  Record record
 * @param  String d_coord, e_coord, f_coord, g_coord
 * @return boolean
 */
public boolean validateCoordinateValues(Record record, String d_coord, String e_coord, String f_coord, String g_coord) {
    if ((d_coord == null || d_coord.trim().equals("")) || (e_coord == null || e_coord.trim().equals("")) ||
        (f_coord == null || f_coord.trim().equals("")) || (g_coord == null || g_coord.trim().equals(""))) {
        ControlField recID = (ControlField) record.getVariableField("001");
        String recNum = recID.getData();
        System.out.println("Record ID: " + recNum.trim() + " - Coordinate values contain null values.");
        return false;
    }
    return true;
}

/**
 * Check decimal degree coordinates to make sure they are valid.
 *
 * @param  Record record
 * @param  Double west, east, north, south
 * @return boolean
 */
protected boolean validateDDCoordinates(Record record, Double west, Double east, Double north, Double south) {
        boolean validValues = true;
        boolean validLines = true;
        boolean validExtent = true;
        boolean validNorthSouth = true;
        boolean validCoordDist = true;

        if (validateValues(record, west, east, north, south)) {
          validLines = validateLines(record, west, east, north, south);
          validExtent = validateExtent(record, west, east, north, south);
          validNorthSouth = validateNorthSouth(record, north, south);
          validCoordDist = validateCoordinateDistance(record, west, east, north, south);
        } else {
          return false;
        }

        // Validate all coordinate combinations
        if (!validLines || !validExtent || !validNorthSouth || !validCoordDist) {
            return false;
        } else {
            return true;
        }
}

/**
 * Check decimal degree coordinates to make sure they do not form a line at the poles.
 *
 * @param  Record record
 * @param  Double west, east, north, south
 * @return boolean
 */
public boolean validateLines(Record record, Double west, Double east, Double north, Double south) {
    if ((!west.equals(east) && north.equals(south)) && (north == 90 || south == -90)) {
        ControlField recID = (ControlField) record.getVariableField("001");
        String recNum = recID.getData();
        System.out.println("Record ID: " + recNum.trim() + " - Coordinates form a line at the pole");
        return false;
    }
    return true;
}

/**
 * Check decimal degree coordinates to make sure they do not contain null values.
 *
 * @param  Record record
 * @param  Double west, east, north, south
 * @return boolean
 */
public boolean validateValues(Record record, Double west, Double east, Double north, Double south) {
    if (west == null || east == null || north == null || south == null) {
        ControlField recID = (ControlField) record.getVariableField("001");
        String recNum = recID.getData();
        System.out.println("Record ID: " + recNum.trim() + " - Decimal Degree coordinates contain null values.");
        return false;
    }
    return true;
}

/**
 * Check decimal degree coordinates to make sure they are within map extent.
 *
 * @param  Record record
 * @param  Double west, east, north, south
 * @return boolean
 */
public boolean validateExtent(Record record, Double west, Double east, Double north, Double south) {
     if (west > 180.0 || west < -180.0 || east > 180.0 || east < -180.0) {
        ControlField recID = (ControlField) record.getVariableField("001");
        String recNum = recID.getData();
        System.out.println("Record ID: " + recNum.trim() + " - Coordinates exceed map extent.");
        return false;
    }
    if (north > 90.0 || north < -90.0 || south > 90.0 || south < -90.0) {
        ControlField recID = (ControlField) record.getVariableField("001");
        String recNum = recID.getData();
        System.out.println("Record ID: " + recNum.trim() + " - Coordinates exceed map extent.");
        return false;
    }
    return true;
}

/**
 * Check decimal degree coordinates to make sure that north is not less than south.
 *
 * @param  Record record
 * @param  Double north, south
 * @return boolean
 */
public boolean validateNorthSouth(Record record, Double north, Double south) {
    if (north < south) {
        ControlField recID = (ControlField) record.getVariableField("001");
        String recNum = recID.getData();
        System.out.println("Record ID: " + recNum.trim() + " - North < South.");
        return false;
    }
    return true;
}

/**
 * Check decimal degree coordinates to make sure they are not too close.
 * Coordinates too close will cause Solr to run out of memory during indexing.
 *
 * @param  Record record
 * @param  Double west, east, north, south
 * @return boolean
 */
public boolean validateCoordinateDistance(Record record, Double west, Double east, Double north, Double south) {
    Double distEW = east - west; 
    Double distNS = north - south;

    //Check for South Pole coordinate distance
    if ((north == -90 || south == -90) && (distNS > 0 && distNS < 0.167)) {
        ControlField recID = (ControlField) record.getVariableField("001");
        String recNum = recID.getData();
        System.out.println("Record ID: " + recNum.trim() + " - Coordinates < 0.167 degrees from South Pole. Coordinate Distance: "+distNS);
	return false;
    }
 
    //Check for East-West coordinate distance 
    if ((west == 0 || east == 0) && (distEW > -2 && distEW <0)) {
        ControlField recID = (ControlField) record.getVariableField("001");
        String recNum = recID.getData();
        System.out.println("Record ID: " + recNum.trim() + " - Coordinates within 2 degrees of Prime Meridian. Coordinate Distance: "+distEW);
        return false;
    }
    return true;
}

/**
 * THIS FUNCTION HAS BEEN DEPRECATED.
 * Determine the longitude and latitude of the items location.
 *
 * @param  Record    record
 * @return String    "longitude, latitude"
 */
public String getLongLat(Record record) {
    // Check 034 subfield d and f
    List fields = record.getVariableFields("034");
    Iterator fieldsIter = fields.iterator();
    if (fields != null) {
        DataField physical;
        while(fieldsIter.hasNext()) {
            physical = (DataField) fieldsIter.next();
            String val;

            List subfields_d = physical.getSubfields('d');
            Iterator subfieldsIter_d = subfields_d.iterator();
            if (subfields_d != null) {
                while (subfieldsIter_d.hasNext()) {
                    val = subfieldsIter_d.next().getData().trim();
                    if (!val.matches("-?\\d+(.\\d+)?")) {
                        return null;
                    }
                }
            }
            List subfields_f = physical.getSubfields('f');
            Iterator subfieldsIter_f = subfields_f.iterator();
            if (subfields_f != null) {
                while (subfieldsIter_f.hasNext()) {
                    String val2 = subfieldsIter_f.next().getData().trim();
                    if (!val2.matches("-?\\d+(.\\d+)?")) {
                        return null;
                    }
                    val = val + ',' + val2;
                }
            }
            return val;
        }
    }
    //otherwise return null
    return null;
}

