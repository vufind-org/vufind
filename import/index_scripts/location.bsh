/**
 * Custom script to get latitude and longitude coordinates.
 * Records can have multiple coordinates sets
 * of points and/or rectangles.
 * Points are represented by coordinate sets where N=S E=W.
 *
 * code adapted from xrosecky - Moravian Library
 * https://github.com/moravianlibrary/VuFind-2.x/blob/master/import/index_scripts/geo.bsh
 * and incorporates VuFind location.bsh functionality for GoogleMap display.
 *
 */

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.marc4j.marc.*;

private static final Pattern COORDINATES_PATTERN = Pattern.compile("^([eEwWnNsS])(\\d{3})(\\d{2})(\\d{2})");
private static final Pattern HDMSHDD_PATTERN = Pattern.compile("^([eEwWnNsS])(\\d+(\\.\\d+)?)");
private static final Pattern PMDD_PATTERN = Pattern.compile("^([+-])(\\d+(\\.\\d+)?)");

// define the base level indexer so that its methods can be called from the script.
// note that the SolrIndexer code will set this value before the script methods are called.
org.solrmarc.index.SolrIndexer indexer = null;

/**
 * Convert MARC coordinates into location_geo format.
 *
 * @param  Record record
 * @return List   geo_coordinates
 */
public List getAllCoordinates(Record record) {
    List geo_coordinates = new ArrayList();
    List list034 = record.getVariableFields("034");
    if (list034 != null) {
        for (VariableField vf : list034) {
            DataField df = (DataField) vf;
            String d = df.getSubfield('d').getData();
            String e = df.getSubfield('e').getData();
            String f = df.getSubfield('f').getData();
            String g = df.getSubfield('g').getData();
            //indexer.getLogger().error("raw Coords: "+d+" "+e+" "+f+" "+g);

            // Check to see if there are only 2 coordinates
            // If so, copy them into the corresponding coordinate fields
            if ((d !=null && (e == null || e.trim().equals(""))) && (f != null && (g==null || g.trim().equals("")))) {
                e = d;
                g = f;
            }
            if ((e !=null && (d == null || d.trim().equals(""))) && (g != null && (f==null || f.trim().equals("")))) {
                d = e;
                f = g;
            }

            // Check and convert coordinates to +/- decimal degrees
            Double west = convertCoordinate(d);
            Double east = convertCoordinate(e);
            Double north = convertCoordinate(f);
            Double south = convertCoordinate(g);

            ControlField recID = record.getVariableField("001");
            String recNum = recID.getData();

            // New Format for indexing coordinates in Solr 5.0 - minX, maxX, maxY, minY
            // Note - storage in Solr follows the WENS order, but display is WSEN order
            String result = String.format("ENVELOPE(%s,%s,%s,%s)", new Object[] { west, east, north, south });

            if (validateCoordinates(west, east, north, south)) {
                    geo_coordinates.add(result);
            } else {
            	indexer.getLogger().error("*** -- Record ID: "+recNum.trim()+"... Not indexing INVALID coordinates.");
                indexer.getLogger().error("*** ---- Coords: "+d+" "+e+" "+f+" "+g+"  | DD coords: "+west+" "+east+" "+north+" "+south);
                indexer.getLogger().error("---------------------------");
            }
        }
    }
    return geo_coordinates;
}

/**
 * Get point coordinates for GoogleMap display.
 *
 * @param  Record record
 * @return List   coordinates
 */
public List getPointCoordinates(Record record) {
    List coordinates = new ArrayList();
    List list034 = record.getVariableFields("034");
    if (list034 != null) {
        for (VariableField vf : list034) {
            DataField df = (DataField) vf;
            String d = df.getSubfield('d').getData();
            String e = df.getSubfield('e').getData();
            String f = df.getSubfield('f').getData();
            String g = df.getSubfield('g').getData();

            // Check to see if there are only 2 coordinates
            if ((d !=null && (e == null || e.trim().equals(""))) && (f != null && (g==null || g.trim().equals("")))) {
                Double long_val = convertCoordinate(d);
                Double lat_val = convertCoordinate(f);
                String longlatCoordinate = Double.toString(long_val) + ',' + Double.toString(lat_val);
                coordinates.add(longlatCoordinate);
            }
            if ((e !=null && (d == null || d.trim().equals(""))) && (g != null && (f==null || f.trim().equals("")))) {
                Double long_val = convertCoordinate(e);
                Double lat_val = convertCoordinate(g);
                String longlatCoordinate = Double.toString(long_val) + ',' + Double.toString(lat_val);
                coordinates.add(longlatCoordinate);
            }
            // Check if N=S and E=W
            if (d.equals(e) && f.equals(g)) {
                Double long_val = convertCoordinate(d);
                Double lat_val = convertCoordinate(f);
                String longlatCoordinate = Double.toString(long_val) + ',' + Double.toString(lat_val);
                coordinates.add(longlatCoordinate);
            }
        }
    }
    return coordinates;
}

/**
 * Get all available coordinates from the record.
 *
 * @param  Record record
 * @return List   geo_coordinates
 */
public List getDisplayCoordinates(Record record) {
    List geo_coordinates = new ArrayList();
    List list034 = record.getVariableFields("034");
    if (list034 != null) {
        for (VariableField vf : list034) {
            DataField df = (DataField) vf;
            String west = df.getSubfield('d').getData();
            String east = df.getSubfield('e').getData();
            String north = df.getSubfield('f').getData();
            String south = df.getSubfield('g').getData();
            String result = String.format("%s %s %s %s", new Object[] { west, east, north, south });
            if (west != null || east != null || north != null || south != null) {
                geo_coordinates.add(result);
            }
        }
    }
    return geo_coordinates;
}

/**
 * Check coordinate type HDMS HDD or +/-DD.
 *
 * @param  String coordinateStr
 * @return Double coordinate
 */
public Double convertCoordinate(String coordinateStr) {
    Double coordinate = Double.NaN;
    Matcher HDmatcher = HDMSHDD_PATTERN.matcher(coordinateStr);
    Matcher PMDmatcher = PMDD_PATTERN.matcher(coordinateStr);
    if (HDmatcher.matches()) {
        String hemisphere = HDmatcher.group(1).toUpperCase();
        Double degrees = Double.parseDouble(HDmatcher.group(2));
        // Check for HDD or HDMS
        if (hemisphere.equals("N") || hemisphere.equals("S")) {
            if (degrees > 90) {
                String hdmsCoordinate = hemisphere+"0"+HDmatcher.group(2);
                coordinate = coordinateToDecimal(hdmsCoordinate);
            } else {
                coordinate = Double.parseDouble(HDmatcher.group(2));
                if (hemisphere.equals("S")) {
                    coordinate *= -1;
                }
            }
        }
        if (hemisphere.equals("E") || hemisphere.equals("W")) {
            if (degrees > 180) {
                String hdmsCoordinate = HDmatcher.group(0);
                coordinate = coordinateToDecimal(hdmsCoordinate);
            } else {
                coordinate = Double.parseDouble(HDmatcher.group(2));
                if (hemisphere.equals("W")) {
                    coordinate *= -1;
                }
            }
        }
        return coordinate;
    } else if (PMDmatcher.matches()) {
        String hemisphere = PMDmatcher.group(1);
        coordinate = Double.parseDouble(PMDmatcher.group(2));
        if (hemisphere.equals("-")) {
            coordinate *= -1;
        }
        return coordinate;
    } else {
        return null;
    }
}

/**
 * Convert HDMS coordinates to decimal degrees.
 *
 * @param  String coordinateStr
 * @return Double coordinate
 */
public Double coordinateToDecimal(String coordinateStr) {
    Matcher matcher = COORDINATES_PATTERN.matcher(coordinateStr);
    if (matcher.matches()) {
        String hemisphere = matcher.group(1).toUpperCase();
        int degrees = Integer.parseInt(matcher.group(2));
        int minutes = Integer.parseInt(matcher.group(3));
        int seconds = Integer.parseInt(matcher.group(4));
        double coordinate = degrees + (minutes / 60.0) + (seconds / 3600.0);
        if (hemisphere.equals("W") || hemisphere.equals("S")) {
            coordinate *= -1;
        }
        return coordinate;
    }
    return null;
}

/**
 * Check decimal degree coordinates to make sure they are valid.
 *
 * @param  Double west, east, north, south
 * @return boolean
 */
public boolean validateCoordinates(Double west, Double east, Double north, Double south) {
    // Validate coordinates
    String validLines = "";
    String validValues = "";
    String validExtent = "";
    String validNorthSouth = "";
    String validCoordDist = "";

    if (validateLines(west, east, north, south)) {
        validLines = "true";
    } else {
        validLines = "false";
        indexer.getLogger().error("*** ERROR: Coordinates form a line at the pole...DD coords: "+west+" "+east+" "+north+" "+south);
    }
    if (validateValues(west, east, north, south)) {
        validValues = "true";
    } else {
        validValues = "false";
        indexer.getLogger().error("*** ERROR: Coordinates contain null values...DD coords: "+west+" "+east+" "+north+" "+south);
    }
    if (validateExtent(west, east, north, south)) {
        validExtent = "true";
    } else {
        validExtent = "false";
        indexer.getLogger().error("*** ERROR: Coordinates outside map extent...DD coords: "+west+" "+east+" "+north+" "+south);
    }
    // Note E-W wrapping is allowed.
    if (validateNorthSouth(north, south)) {
        validNorthSouth = "true";
    } else {
        validNorthSouth = "false";
        indexer.getLogger().error("*** ERROR: North < South...DD coords: "+west+" "+east+" "+north+" "+south);
    }

    if (validateCoordinateDistance(west, east, north, south)) {
        validCoordDist = "true";
    } else {
        validCoordDist = "false";
    }
    if (validLines.equals("true") && validValues.equals("true") && validExtent.equals("true") && validNorthSouth.equals("true") && validCoordDist.equals("true")) {
        return true;
    } else {
        return false;

    }
}

/**
 * Check decimal degree coordinates to make sure they do not form a line at the poles.
 *
 * @param  Double west, east, north, south
 * @return boolean
 */
public boolean validateLines(Double west, Double east, Double north, Double south) {
    if ((!west.equals(east) && north.equals(south)) && (north == 90 || south == -90)) {
        return false;
    }
    return true;
}

/**
 * Check decimal degree coordinates to make sure they do not contain null values.
 *
 * @param  Double west, east, north, south
 * @return boolean
 */
public boolean validateValues(Double west, Double east, Double north, Double south) {
    if (west == null || east == null || north == null || south == null) {
        return false;
    }
    return true;
}

/**
 * Check decimal degree coordinates to make sure they are within map extent.
 *
 * @param  Double west, east, north, south
 * @return boolean
 */
public boolean validateExtent(Double west, Double east, Double north, Double south) {
     if (west > 180.0 || west < -180.0 || east > 180.0 || east < -180.0) {
        return false;
    }
    if (north > 90.0 || north < -90.0 || south > 90.0 || south < -90.0) {
        return false;
    }
    return true;
}

/**
 * Check decimal degree coordinates to make sure that north is not less than south.
 *
 * @param  Double north, south
 * @return boolean
 */
public boolean validateNorthSouth(Double north, Double south) {
    if (north < south) {
        return false;
    }
    return true;
}

/**
 * Check decimal degree coordinates to make sure they are not too close.
 * Coordinates too close will cause Solr to run out of memory during indexing.
 *
 * @param  Double west, east, north, south
 * @return boolean
 */
public boolean validateCoordinateDistance(Double west, Double east, Double north, Double south) {
    Double distEW = east - west;
    Double distNS = north - south;
    // DEBUG code
    // indexer.getLogger().error("Coordinate Distance: EW: "+distEW+" NS: "+distNS);

    //Check for South Pole coordinate distance
    if ((north == -90 || south == -90) && (distNS > 0 && distNS < 0.167)) {
        indexer.getLogger().error("*** ERROR: Coordinates < 0.167 degrees from South Pole...Coordinate Distance: "+distNS);
        return false;
    }

    //Check for East-West coordinate distance
    if ((west == 0 || east == 0) && (distEW > -2 && distEW <0)) {
        indexer.getLogger().error("*** ERROR: Coordinates < 2 degrees from Prime Meridian...Coordinate Distance: "+distEW);
        return false;
    }
    return true;
}
/**
 * THIS FUNCTION HAS BEEN DEPRECATED.
 * Determine the longitude and latitude of the items location.
 *
 * @param  Record    record
 * @return String    "longitude, latitude"
 */
public String getLongLat(Record record) {
    // Check 034 subfield d and f
    List fields = record.getVariableFields("034");
    Iterator fieldsIter = fields.iterator();
    if (fields != null) {
        DataField physical;
        while(fieldsIter.hasNext()) {
            physical = (DataField) fieldsIter.next();
            String val;

            List subfields_d = physical.getSubfields('d');
            Iterator subfieldsIter_d = subfields_d.iterator();
            if (subfields_d != null) {
                while (subfieldsIter_d.hasNext()) {
                    val = subfieldsIter_d.next().getData().trim();
                    if (!val.matches("-?\\d+(.\\d+)?")) {
                        return null;
                    }
                }
            }
            List subfields_f = physical.getSubfields('f');
            Iterator subfieldsIter_f = subfields_f.iterator();
            if (subfields_f != null) {
                while (subfieldsIter_f.hasNext()) {
                    String val2 = subfieldsIter_f.next().getData().trim();
                    if (!val2.matches("-?\\d+(.\\d+)?")) {
                        return null;
                    }
                    val = val + ',' + val2;
                }
            }
            return val;
        }
    }
    //otherwise return null
    return null;
}
