/**
 * Custom script to get geo coordinates.
 * Records can have multiple rectangle coordinates sets. 
 * Points are represented by coordinate sets where N=S E=W.
 * 
 * code adapted from xrosecky - Moravian Library
 * https://github.com/moravianlibrary/VuFind-2.x/blob/master/import/index_scripts/geo.bsh
 */

/**
 * Get all available coordinates from the record.
 *
 * @param  Record          record
 * @return List             geo_coordinates
 */

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.marc4j.marc.*;

private static final Pattern COORDINATES_PATTERN = Pattern.compile("^([eEwWnNsS])(\\d{3})(\\d{2})(\\d{2})");

public List getCoordinates(Record record) {
   List geo_coordinates = new ArrayList();
   List list034 = record.getVariableFields("034");

   if (list034 != null) {
    for (VariableField vf : list034) {
      DataField df = (DataField) vf;
      String d = df.getSubfield('d').getData();
      String e = df.getSubfield('e').getData();
      String f = df.getSubfield('f').getData();
      String g = df.getSubfield('g').getData();

System.out.println(d+" "+e+" "+f+" "+g);
//Have to move coordinates off the poles because we can't query or display beyond 85N or 85S
      if (d != null && e != null && f != null && g != null) {
         if (f.equals("S900000")) {
            f2="S840000";
         } else { f2=f; }

         if (g.equals("S900000")) {
            g2="S850000";
         } else { g2=g; }
         String newf = f2.substring(0,1)+"0"+f2.substring(1,7);
         String newg = g2.substring(0,1)+"0"+g2.substring(1,7);

         Double west = coordinateToDecimal(d);
         Double east = coordinateToDecimal(e);
         Double north = coordinateToDecimal(newf);
         Double south = coordinateToDecimal(newg);


// New Format for indexing coordinates in Solr 5.0 - minX, maxX, maxY, minY
// Note - storage in Solr follows the WENS order, but display is WSEN order

        String result = String.format("ENVELOPE(%s,%s,%s,%s)", new Object[] { west, east, north, south });
//        String result = String.format("%s %s %s %s", new Object[] { west, east, north, south });

        if (validateCoordinates(west, east, north, south)) {
            geo_coordinates.add(result);          
//System.out.println("geocoords"+geo_coordinates);
        }
      }
    }
   }
    return geo_coordinates;
}

public Double coordinateToDecimal(String coordinateStr) {
//System.out.println("in CoordinateToDecimal");

    Matcher matcher = COORDINATES_PATTERN.matcher(coordinateStr);
    if (matcher.matches()) {
        String hemisphere = matcher.group(1).toUpperCase();
        int degrees = Integer.parseInt(matcher.group(2));
        int minutes = Integer.parseInt(matcher.group(3));
        int seconds = Integer.parseInt(matcher.group(4));
        double coordinate = degrees + (minutes / 60.0) + (seconds / 3600.0);
        if (hemisphere.equals("W") || hemisphere.equals("S")) {
                coordinate *= -1;
        }
        return coordinate;
    } else {
        return null;
    }
}

public boolean validateCoordinates(Double west, Double east, Double north, Double south) {
//System.out.println("in ValidateCoordinates");
        if (west == null || east == null || north == null || south == null) {
                return false;
        }
        if (west > 180.0 || west < -180.0 || east > 180.0 || east < -180.0) {
                return false;
        }
        if (north > 90.0 || north < -90.0 || south > 90.0 || south < -90.0) {
                return false;
        }
        if (north < south || west > east) {
                return false;
        }
        return true;
}


