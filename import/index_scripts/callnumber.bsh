/**
 * Custom call number script.
 *
 * This can be used to override built-in SolrMarc custom functions.  If you change
 * this script, you will need to activate it in import/marc_local.properties before
 * it will be applied during indexing.
 */
import org.marc4j.marc.Record;

// define the base level indexer so that its methods can be called from the script.
// note that the SolrIndexer code will set this value before the script methods are called.
org.solrmarc.index.SolrIndexer indexer = null;

/**
* Extract the call number label from a record
* @param record
* @return Call number label
*/
public String getFullCallNumber(Record record) {

return(getFullCallNumber(record, "099ab:090ab:050ab"));
}

/**
* Extract the call number label from a record
* @param record
* @return Call number label
*/
public String getFullCallNumber(Record record, String fieldSpec) {

String val = indexer.getFirstFieldVal(record, fieldSpec);

if (val != null) {
return val.toUpperCase().replaceAll(" ", "");
} else {
return val;
}
}

/**
* Extract the call number label from a record
* @param record
* @return Call number label
*/
public String getCallNumberLabel(Record record) {       

return getCallNumberLabel(record, "090a:050a");
}

/**
* Extract the call number label from a record
* @param record
* @return Call number label
*/
public String getCallNumberLabel(Record record, String fieldSpec) {

String val = indexer.getFirstFieldVal(record, fieldSpec);

if (val != null) {
int dotPos = val.indexOf(".");
if (dotPos > 0) {
    val = val.substring(0, dotPos);
}
return val.toUpperCase();
} else {
return val;
}
}

/**
* Extract the subject component of the call number
*
* Can return null
*
* @param record
* @return Call number label
*/
public String getCallNumberSubject(Record record) {

return(getCallNumberSubject(record, "090a:050a"));
}

/**
* Extract the subject component of the call number
*
* Can return null
*
* @param record
* @return Call number label
*/
public String getCallNumberSubject(Record record, String fieldSpec) {

String val = indexer.getFirstFieldVal(record, fieldSpec);

if (val != null) {
String [] callNumberSubject = val.toUpperCase().split("[^A-Z]+");
if (callNumberSubject.length > 0)
{
    return callNumberSubject[0];
}
}
return(null);
}

/**
* Normalize a single LCCN
* @param record
* @param fieldSpec
* @return String Normalized LCCN
*/
public String getFullCallNumberNormalized(Record record) {

return(getFullCallNumberNormalized(record, "099ab:090ab:050ab"));
}

/**
* Normalize a single LCCN
* @param record
* @param fieldSpec
* @return String Normalized LCCN
*/
public String getFullCallNumberNormalized(Record record, String fieldSpec) {

    if (fieldSpec != null) {
        String cn = indexer.getFirstFieldVal(record, fieldSpec);
        return (new LCCallNumber(cn)).getShelfKey();
    }
    // If we got this far, we couldn't find a valid value:
    return null;
}
